package com.xiezhiai.wechatplugin.hooker;

import android.app.Activity;
import android.app.Dialog;
import android.content.ComponentName;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.widget.TextView;

import com.xiezhiai.wechatplugin.ui.aty.MainActivity;
import com.xiezhiai.wechatplugin.ui.aty.SendMsgEditActivity;
import com.xiezhiai.wechatplugin.utils.AppUtil;
import com.xiezhiai.wechatplugin.utils.LogUtil;

import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.util.ArrayList;

import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;

/**
 * Created by shijiwei on 2018/11/26.
 *
 * @Desc:
 */
public class SendImageHooker implements IHooker {

    private static final String TAG = "SendImageHooker";

    String SendImgProxyUI = "com.tencent.mm.ui.chatting.SendImgProxyUI";
    String ImageDownloadUI = "com.tencent.mm.ui.chatting.ImageDownloadUI";

    String SelectConversationUI = "com.tencent.mm.ui.transmit.SelectConversationUI";
    String MsgRetransmitUI = "com.tencent.mm.ui.transmit.MsgRetransmitUI";

    String bh_d = "com.tencent.mm.bh.d";
    String method_bh_d_a = "a";


    @Override
    public void hook(XC_LoadPackage.LoadPackageParam lpparam) {
        Class cls_SendImgProxyUI = XposedHelpers.findClass(SendImgProxyUI, lpparam.classLoader);
        Class cls_bh_d = XposedHelpers.findClass(bh_d, lpparam.classLoader);


        XposedHelpers.findAndHookMethod(Dialog.class, "show", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);

                LogUtil.e(TAG + " Dialog.show " + param.thisObject.getClass());
            }
        });


        XposedHelpers.findAndHookMethod(cls_SendImgProxyUI, "a", cls_SendImgProxyUI, Intent.class, new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
//                super.afterHookedMethod(param);
                Member method = param.method;
                LogUtil.e(TAG + "  " + method.getDeclaringClass() + "___" + method.getName());
            }
        });


        XposedBridge.hookAllMethods(Activity.class, "startActivity", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {

                Object caller = param.thisObject;
                Intent intent = (Intent) param.args[0];

                LogUtil.e(TAG + " startActivity  " + caller.getClass());
                logIntent(intent);

            }
        });

        XposedBridge.hookAllMethods(Activity.class, "startActivityForResult", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {

                Object caller = param.thisObject;
                Intent intent = (Intent) param.args[0];
                int requestCode = (int) param.args[1];

                LogUtil.e(TAG + " startActivityForResult  " + caller.getClass() + "  requestCode: " + requestCode);
                logIntent(intent);

            }
        });

        XposedBridge.hookAllMethods(Fragment.class, "startActivity", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {

                Object caller = param.thisObject;
                Intent intent = (Intent) param.args[0];

                LogUtil.e(TAG + " startActivity  " + caller.getClass());
                logIntent(intent);
            }
        });

        XposedBridge.hookAllMethods(Fragment.class, "startActivityForResult", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {

                Object caller = param.thisObject;
                Intent intent = (Intent) param.args[0];
                int requestCode = (int) param.args[1];

                LogUtil.e(TAG + " startActivityForResult  " + caller.getClass() + "  requestCode: " + requestCode);
                logIntent(intent);
            }
        });

        XposedHelpers.findAndHookMethod("com.tencent.mm.plugin.gallery.ui.AlbumPreviewUI", lpparam.classLoader, "onActivityResult",
                int.class, int.class, Intent.class, onActivityResult_MethodHook);

        XposedHelpers.findAndHookMethod("com.tencent.mm.ui.chatting.ChattingUI", lpparam.classLoader, "onActivityResult",
                int.class, int.class, Intent.class, onActivityResult_MethodHook);

    }

    static XC_MethodHook onActivityResult_MethodHook = new XC_MethodHook() {
        @Override
        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
            super.beforeHookedMethod(param);
            int requestCode = (int) param.args[0];
            int resultCode = (int) param.args[1];
            Intent intent = (Intent) param.args[2];

            StringBuilder builder = new StringBuilder();
            builder.append(TAG + "onActivityResult_MethodHook \n");
            builder.append(param.thisObject.getClass().toString() + "\n");
            builder.append("requestCode = " + requestCode + "  resultCode = " + resultCode + "\n");
            if (intent != null) {
                for (String key : intent.getExtras().keySet()) {
                    Object value = intent.getExtras().get(key);

                    builder.append(" | key = " + key
                            + " | value = " + value
                            + " | class = " + (value == null ? null : value.getClass().getName()));
                }
            }

            LogUtil.log(builder.toString());

        }
    };


    public static void sendImage() {

        ArrayList<String> videos = new ArrayList<>();
        ArrayList<String> images = new ArrayList<>();
        images.add("/storage/emulated/0/tencent/MicroMsg/WeiXin/mmexport1542771396200.jpg");

        Intent intent = new Intent();
        ComponentName componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.chatting.SendImgProxyUI");
        intent.setComponent(componentName);
        intent.putExtra("key_select_video_list", videos);
        intent.putExtra("CropImage_limit_Img_Size", 26214400);
        intent.putExtra("GalleryUI_FromUser", "wxid_x62kfuwlasxh22");
        intent.putExtra("KSelectImgUseTime", 21684L);
        intent.putExtra("CropImage_OutputPath_List", images);
        intent.putExtra("CropImage_Compress_Img", true);
        intent.putExtra("GalleryUI_ToUser", "wxid_j2nzug3sjt0t22");
        AppUtil.getSystemContext().startActivity(intent);
    }


    public static void retransmit() {
        Intent intent = new Intent();
        ComponentName componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.transmit.MsgRetransmitUI");
        intent.setComponent(componentName);
        intent.putExtra("Retr_Msg_Id", 52);
        intent.putExtra("Retr_show_success_tips", true);
        intent.putExtra("Retr_File_Name", "/storage/emulated/0/tencent/MicroMsg/72a2a8bd03fded407d20cd682d22d47a/image2/27/52/275283dc71011cda25e2b800582ff172.jpg");
        intent.putExtra("Retr_Compress_Type", 0);
        intent.putExtra("Retr_Msg_Type", 0);
        AppUtil.getSystemContext().startActivity(intent);
    }

    private void logIntent(Intent intent) {
        if (intent == null) return;
        for (String key : intent.getExtras().keySet()) {
            Object value = intent.getExtras().get(key);
            LogUtil.log(TAG + " 当前页面传参",
                    " | key = " + key
                            + " | value = " + value
                            + " | class = " + (value == null ? null : value.getClass().getName())
            );
        }
    }
}
