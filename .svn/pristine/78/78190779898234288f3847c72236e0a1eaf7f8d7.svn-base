package com.xiezhiai.wechatplugin.hooker;

import android.content.ContentValues;

import com.xiezhiai.wechatplugin.core.Config;
import com.xiezhiai.wechatplugin.func.autoreply.AutoReplyer;
import com.xiezhiai.wechatplugin.func.transfer.PluginHandler;
import com.xiezhiai.wechatplugin.model.wechat.Message;
import com.xiezhiai.wechatplugin.utils.LogUtil;

import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;

/**
 * Created by shijiwei on 2018/10/12.
 *
 * @Desc: 自动回复消息
 */
public class AutoReplyHooker implements IHooker {


    /**
     * "1" ->  [纯文本]
     * "3" -> "[图片]"
     * "34" -> "[语音]"
     * "47" -> "[表情]"
     * "50" -> "[语音/视频通话]"
     * "43" -> "[小视频]"
     * "49" -> "[分享]"
     * "48" -> content          // 位置信息
     * "10000" -> content       // 系统提示信息
     * else -> content          // 其他信息，包含红包、转账等
     */

    public static final int MSG_SEND_BY_SELF = 1;
    public static final String CHAT_ROOM_CONVERSATION = "@chatroom";
    public static final String USER_CONVERSATION = "wxid_";

    private static AutoReplyer autoReplyer;

    static {
        autoReplyer = new AutoReplyer();
        new Thread(autoReplyer).start();
    }

    @Override
    public void hook(final XC_LoadPackage.LoadPackageParam lpparam) {

        XposedHelpers.findAndHookMethod(
                "com.tencent.wcdb.database.SQLiteDatabase",
                lpparam.classLoader,
                "insert",
                String.class, String.class, ContentValues.class,
                new XC_MethodHook() {
                    @Override
                    protected void afterHookedMethod(MethodHookParam param) {

                        if (param.args[0].equals("message")) {
                            if (!PluginHandler.isWechatPluginInService()) return;
                            autoReplyer.setLpparam(lpparam);
                            ContentValues contentValues = ((ContentValues) param.args[2]);
                            int type = contentValues.getAsInteger("type");
                            if (type == 1 || type == 3 || type == 43) {

                                final String talker = contentValues.getAsString("talker");
                                String content = contentValues.getAsString("content");
                                Integer isSend = contentValues.getAsInteger("isSend");
                                String msgId = contentValues.getAsString("msgId");
                                String msgSvrId = contentValues.getAsString("msgSvrId");
                                String imgPath = contentValues.getAsString("imgPath");

                                Message message = new Message(talker, content, type, isSend, msgSvrId, msgId, imgPath);
                                LogUtil.log("微信自动回复 | Message talker : " + talker
                                        + "   type : " + type
                                        + "  msgSvrId ：" + msgSvrId
                                        + "  imgPath ：" + imgPath
                                        + "  content ：" + content);

                                if (isSend == MSG_SEND_BY_SELF) {
                                    return;
                                }

                                if (talker.equals("weixin") || talker.equals("filehelper")) {
                                    return;
                                }

                                if (talker.endsWith(CHAT_ROOM_CONVERSATION)) {
                                    /* 群聊组会话,@自己的消息才回复 */
                                    if (!PluginHandler.cookie.getPermission().isAutoReplyChatroom() || !content.contains("@" + Config.xWechat.loginUser.getUserNickName())) {
                                        return;
                                    }

                                    if (!PluginHandler.isAllChatroomsAutoReply) {
                                        boolean shot = false;
                                        for (int i = 0; i < PluginHandler.autoReplyChatrooms.size(); i++) {
                                            if (PluginHandler.autoReplyChatrooms.get(i).getId().equals(talker)) {
                                                shot = true;
                                                break;
                                            }
                                        }
                                        if (!shot) return;
                                    }

                                    for (int i = 0; i < PluginHandler.autoReplyChatrooms.size(); i++) {
                                        LogUtil.log("微信自动回复 all chatroom: " + PluginHandler.autoReplyChatrooms + "  id: " + PluginHandler.autoReplyChatrooms.get(i).getId());
                                    }

                                    /* 对群发内容做裁剪处理 */
                                    String flag = "@" + Config.xWechat.loginUser.getUserNickName();
                                    message.setContent(
                                            content.substring(content.indexOf(flag) + flag.length())
                                    );

                                    LogUtil.log("微信自动回复 聊天组消息裁剪:" + message.getContent());
                                } else {
                                    /* 普通好友聊天 */
                                    if (!PluginHandler.cookie.getPermission().isAutoReplyUser()) {
                                        return;
                                    }
                                }

                                autoReplyer.put(message);
                            }
                        }
                    }
                }
        );
    }


    /**
     * @param msg
     */
    public static void putMessage(Message msg) {
        if (autoReplyer == null || msg == null) return;
        autoReplyer.put(msg);
    }

}
