package com.xiezhiai.wechatplugin.hooker;

import android.app.Activity;
import android.app.AndroidAppHelper;
import android.app.Application;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.os.Handler;
import android.util.Log;
import android.widget.BaseAdapter;

import com.alibaba.fastjson.JSON;
import com.xiezhiai.wechatplugin.core.Config;
import com.xiezhiai.wechatplugin.func.transfer.PluginServer;
import com.xiezhiai.wechatplugin.utils.AccessControl;
import com.xiezhiai.wechatplugin.utils.AppUtil;
import com.xiezhiai.wechatplugin.utils.LogUtil;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;


/**
 * Created by shijiwei on 2018/10/12.
 *
 * @Desc:
 */
public class WechatActivityHooker implements IHooker {

    /**
     * com.tencent.mm.ui.LauncherUI -> com.tencent.mm.plugin.account.ui.LoginPasswordUI
     * <p>
     * com.tencent.mm.plugin.account.ui.MobileInputUI
     * <p>
     * com.tencent.mm.plugin.setting.ui.setting.SettingsSwitchAccountUI
     * <p>
     * com.tencent.mm.plugin.setting.ui.setting.SettingsUI
     * <p>
     * com.tencent.mm.ui.chatting.ChattingUI$a
     * com.tencent.mm.plugin.gallery.ui.AlbumPreviewUI
     */

    private static final String TAG = "WechatActivityHooker";
    private static Object ImageGalleryUI = null;

    private AccessControl loadWXLastLoginUserAccessControl = new AccessControl();
    private static ExecutorService hookTaskPool = Executors.newSingleThreadExecutor();

    private static final int LOAD_WECHAT_PREFERENCE = 100;

    private static Handler hookTaskHandler = new Handler() {
        @Override
        public void handleMessage(android.os.Message msg) {
            switch (msg.what) {
                case LOAD_WECHAT_PREFERENCE:
                    ContactsHooker.resetFlag();
                    Config.loadWXLastLoginUser();
                    break;
            }
        }
    };

    @Override
    public void hook(final XC_LoadPackage.LoadPackageParam lpparam) {

        XposedHelpers.findAndHookMethod(Application.class, "onCreate", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                LogUtil.log("微信当前界面_Application：" + param.thisObject.getClass().getName());
                /* 启动微信的时候调用 */
                if (loadWXLastLoginUserAccessControl.isAccess()) {
//                    Config.loadWXLastLoginUser();
                }
            }
        });

        XposedHelpers.findAndHookMethod(Activity.class, "onStart", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {

                String uiPath = param.thisObject.getClass().getName();
                Class<?> acls = param.thisObject.getClass();
                LogUtil.log("微信当前界面 onStart ：" + uiPath + "  cls: " + acls.getName() + "   superclas: " + acls.getSuperclass().getName());
                if (uiPath.equals("com.tencent.mm.ui.LauncherUI")) {
                    WechatHooker.initialNoHttp(AndroidAppHelper.currentApplication());
                    PluginServer.start();
                } else if (uiPath.equals("com.tencent.mm.plugin.sns.ui.SnsUserUI")) {
                    SnsHooker.getSns();
                } else if (uiPath.equals("com.tencent.mm.ui.chatting.gallery.ImageGalleryUI")) {
                    ImageGalleryUI = param.thisObject;
                } else if (uiPath.equals("com.tencent.mm.plugin.gallery.ui.AlbumPreviewUI")
                        || uiPath.equals("com.tencent.mm.plugin.gallery.ui.ImagePreviewUI")
                        || uiPath.equals("com.tencent.mm.ui.chatting.SendImgProxyUI")
                        || uiPath.equals("com.tencent.mm.ui.chatting.gallery.ImageGalleryUI")
                        || uiPath.equals("com.tencent.mm.ui.chatting.ChattingUI$a")
                        ) {

                }

                logExtras((Activity) param.thisObject);

            }
        });

        XposedHelpers.findAndHookMethod(Activity.class, "onDestroy", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                String uiPath = param.thisObject.getClass().getName();
                Class<?> acls = param.thisObject.getClass();
                LogUtil.log("微信当前界面  onDestroy ：" + uiPath + "  cls: " + acls.getName() + "   superclas: " + acls.getSuperclass().getName());
                if (uiPath.equals("com.tencent.mm.ui.LauncherUI")) {
                    PluginServer.stop();
                }
            }
        });


        XposedHelpers.findAndHookMethod(Service.class, "onCreate", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                LogUtil.log("微信当前界面_Service：" + param.thisObject.getClass().getName());
            }
        });


        XposedBridge.hookAllConstructors(BaseAdapter.class, new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                String name = param.thisObject.getClass().getName();
                LogUtil.log("微信当前界面_Adapter：" + name);
                if (name.equals("com.tencent.mm.ui.base.preference.h")) {
                    hookTaskHandler.removeMessages(LOAD_WECHAT_PREFERENCE);
                    hookTaskHandler.sendEmptyMessageDelayed(LOAD_WECHAT_PREFERENCE, 200);
                }
            }
        });


    }


    /**
     * 退出 ImageGalleryUI 界面
     */
    public static void finishImageGalleryUI() {
        if (ImageGalleryUI != null) {
            XposedHelpers.callMethod(ImageGalleryUI, "finish");
        }
    }


    /**
     * 打印activity的intent传参
     *
     * @param activity
     */
    private void logExtras(Activity activity) {
        Intent intent = activity.getIntent();
        if (intent.getExtras() == null) return;
        for (String key : intent.getExtras().keySet()) {
            Object value = intent.getExtras().get(key);
            LogUtil.log("当前页面传参",
                    activity.getClass().getName()
                            + " | key = " + key
                            + " | value = " + value
                            + " | class = " + (value == null ? null : value.getClass().getName())
            );
        }

    }


    private Method calledMethod;
    private Object caller;
    private Class<?> iClass;

    private void answer(final String talker, String answer) {
        LogUtil.e(TAG + "  answer  ");
        try {
            XC_LoadPackage.LoadPackageParam lpparam = WechatHooker.wxllparam;
            if (calledMethod == null || caller == null || iClass == null) {
                if (lpparam == null) lpparam = WechatHooker.wxllparam;
                Class<?> gClass = XposedHelpers.findClass("com.tencent.mm.kernel.g", lpparam.classLoader);
                Object Ea = XposedHelpers.callStaticMethod(gClass, "Ea");
                Object fVR = XposedHelpers.getObjectField(Ea, "fVR");

                Class<?> oClass = XposedHelpers.findClass("com.tencent.mm.ac.o", lpparam.classLoader);
                Class<?> lClass = XposedHelpers.findClass("com.tencent.mm.ac.l", lpparam.classLoader);

                calledMethod = XposedHelpers.findMethodExact(oClass, "a", lClass, int.class);
                caller = XposedHelpers.callStaticMethod(oClass, "a", fVR);

                //调用这里可以实现自动回复 并发送到对方
                iClass = XposedHelpers.findClass("com.tencent.mm.modelmulti.i", lpparam.classLoader);
            }

            Object io = XposedHelpers.newInstance(
                    iClass,
                    new Class[]{String.class, String.class, int.class, int.class, Object.class},
                    talker, answer, 1, 1, new HashMap<String, String>() {{
                        put(talker, talker);
                    }});
            Object[] args = new Object[]{io, 0};

            XposedBridge.invokeOriginalMethod(calledMethod, caller, args);

        } catch (Exception e) {
            LogUtil.log(TAG + " 微信自动回复 失败 !! " + e.getMessage());
        } finally {
        }

    }


}
