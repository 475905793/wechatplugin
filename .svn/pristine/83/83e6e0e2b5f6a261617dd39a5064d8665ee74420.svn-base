package com.xiezhiai.wechatplugin.hooker;

import android.app.Activity;
import android.app.Application;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.widget.BaseAdapter;

import com.xiezhiai.wechatplugin.core.Config;
import com.xiezhiai.wechatplugin.receiver.CommandReceiver;
import com.xiezhiai.wechatplugin.receiver.HookDataReceiver;
import com.xiezhiai.wechatplugin.utils.AccessControl;
import com.xiezhiai.wechatplugin.utils.AppUtil;
import com.xiezhiai.wechatplugin.utils.LogUtil;
import com.yanzhenjie.nohttp.InitializationConfig;
import com.yanzhenjie.nohttp.Logger;
import com.yanzhenjie.nohttp.NoHttp;
import com.yanzhenjie.nohttp.cache.DBCacheStore;
import com.yanzhenjie.nohttp.cache.DiskCacheStore;
import com.yanzhenjie.nohttp.cookie.DBCookieStore;

import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;

/**
 * Created by shijiwei on 2018/10/12.
 *
 * @Desc:
 */
public class WechatActivityHooker implements IHooker {

    /**
     * com.tencent.mm.ui.LauncherUI -> com.tencent.mm.plugin.account.ui.LoginPasswordUI
     * <p>
     * com.tencent.mm.plugin.account.ui.MobileInputUI
     * <p>
     * com.tencent.mm.plugin.setting.ui.setting.SettingsSwitchAccountUI
     * <p>
     * com.tencent.mm.plugin.setting.ui.setting.SettingsUI
     * <p>
     * com.tencent.mm.ui.chatting.ChattingUI$a
     * com.tencent.mm.plugin.gallery.ui.AlbumPreviewUI
     */

    private static Object ImageGalleryUI = null;

    private AccessControl loadWXLastLoginUserAccessControl = new AccessControl();

    @Override
    public void hook(final XC_LoadPackage.LoadPackageParam lpparam) {


        XposedHelpers.findAndHookMethod(Application.class, "onCreate", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                LogUtil.log("微信当前界面_Application：" + param.thisObject.getClass().getName());
                /* 启动微信的时候调用 */
//                Application wxApp = (Application) param.thisObject;
//                wxApp.startService(new Intent(wxApp, PluginServer.class));

                if (loadWXLastLoginUserAccessControl.isAccess()) {
                    registerCommandReceiver(AppUtil.getSystemContext());
                    HookDataReceiver.shotHookWechat(AppUtil.getSystemContext());
                    Config.loadWXLastLoginUser();
                }
                initialNoHttp((Context) param.thisObject);
            }
        });

        XposedHelpers.findAndHookMethod(Activity.class, "onStart", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {

                String uiPath = param.thisObject.getClass().getName();
                Class<?> acls = param.thisObject.getClass();
                LogUtil.log("微信当前界面：" + uiPath + "  cls: " + acls.getName() + "   superclas: " + acls.getSuperclass().getName());
                if (uiPath.equals("com.tencent.mm.ui.LauncherUI")) {
                } else if (uiPath.equals("com.tencent.mm.plugin.sns.ui.SnsUserUI")) {
                    SnsHooker.getSnsFromDB();
                } else if (uiPath.equals("com.tencent.mm.ui.chatting.gallery.ImageGalleryUI")) {
                    ImageGalleryUI = param.thisObject;
                } else if (uiPath.equals("com.tencent.mm.plugin.gallery.ui.AlbumPreviewUI")
                        || uiPath.equals("com.tencent.mm.plugin.gallery.ui.ImagePreviewUI")
                        || uiPath.equals("com.tencent.mm.ui.chatting.SendImgProxyUI")
                        || uiPath.equals("com.tencent.mm.ui.chatting.gallery.ImageGalleryUI")
                        || uiPath.equals("com.tencent.mm.ui.chatting.ChattingUI$a")
                        ) {

                }

                logExtras((Activity) param.thisObject);

            }
        });

//        XposedHelpers.findAndHookMethod("com.tencent.mm.ui.MMFragmentActivity", lpparam.classLoader, "onStart", new XC_MethodHook() {
//            @Override
//            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
//                String uiPath = param.thisObject.getClass().getName();
//                Class<?> acls = param.thisObject.getClass();
//                LogUtil.log("微信当前界面：" + uiPath + "  cls: " + acls.getName() + "   superclas: " + acls.getSuperclass().getName());
//                logExtras((Activity) param.thisObject);
//            }
//        });


        XposedHelpers.findAndHookMethod(Service.class, "onCreate", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                LogUtil.log("微信当前界面_Service：" + param.thisObject.getClass().getName());
            }
        });


        XposedBridge.hookAllConstructors(BaseAdapter.class, new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                String name = param.thisObject.getClass().getName();
                LogUtil.log("微信当前界面_Adapter：" + name);
                if (name.equals("com.tencent.mm.ui.base.preference.h")) {
                    HookDataReceiver.shotHookWechat(AppUtil.getSystemContext());
                    Config.loadWXLastLoginUser();
                }
            }
        });


    }

    private CommandReceiver commandReceiver = new CommandReceiver();

    /**
     * 注册广播接受指令
     *
     * @param context
     */
    private void registerCommandReceiver(Context context) {
        IntentFilter filter = new IntentFilter();
        filter.addAction(CommandReceiver.ACTION_SEND_MSG_TO_USER);
        filter.addAction(CommandReceiver.ACTION_SEND_MSG_TO_CHATROOM);
        filter.addAction(CommandReceiver.ACTION_SETTING_CONFIG);
        filter.addAction(CommandReceiver.ACTION_SELECT_AUTO_REPLY_CHATROOM);
        context.registerReceiver(commandReceiver, filter);
    }


    /**
     * 退出 ImageGalleryUI 界面
     */
    public static void finishImageGalleryUI() {
        if (ImageGalleryUI != null) {
            XposedHelpers.callMethod(ImageGalleryUI, "finish");
        }
    }

    /**
     * 打印activity的intent传参
     *
     * @param activity
     */
    private void logExtras(Activity activity) {
        Intent intent = activity.getIntent();
        if (intent.getExtras() == null) return;
        for (String key : intent.getExtras().keySet()) {
            Object value = intent.getExtras().get(key);
            LogUtil.log("当前页面传参",
                    activity.getClass().getName()
                            + " | key = " + key
                            + " | value = " + value
                            + " | class = " + (value == null ? null : value.getClass().getName())
            );
        }

    }


    /**
     * Initialize nohttp
     */
    private void initialNoHttp(Context context) {

        NoHttp.initialize(
                InitializationConfig.newBuilder(context)
                        // 设置全局连接超时时间，单位毫秒
                        .connectionTimeout(10 * 1000)
                        // 设置全局服务器响应超时时间，单位毫秒
                        .readTimeout(10 * 1000)
                        // 保存到数据库,如果不使用缓存，设置false禁用
                        .cacheStore(new DBCacheStore(context).setEnable(true))
                        // 或者保存到SD卡
                        .cacheStore(new DiskCacheStore(context))
                        // 默认保存数据库DBCookieStore，开发者可以自己实现; 如果不维护cookie，设置false禁用。)
                        .cookieStore(new DBCookieStore(context).setEnable(false))
                        // 使用HttpURLConnection
//                        .networkExecutor(new URLConnectionNetworkExecutor())
                        // 使用OkHttp
//                        .networkExecutor(new OkHttpNetworkExecutor())
                        .build()
        );

        // 开启NoHttp的调试模式, 配置后可看到请求过程、日志和错误信息。
        Logger.setDebug(true);
        // 设置NoHttp打印Log的tag
        Logger.setTag("XizZhiAI_NoHttp");

    }
}
